{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst initialState = {\n  transfer: {},\n  dataTarget: {},\n  loading: false,\n  message: \"\",\n  status: \"success\"\n};\n\nconst transferReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"INSERT_DATA_TRANSFER\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: action.payload\n      });\n\n    case \"TRANSFER_REQUEST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: true\n      });\n\n    case \"TRANSFER_SUCCESS\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        status: \"success\"\n      });\n\n    case \"TRANSFER_FAILURE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        loading: false,\n        message: action.payload,\n        status: \"failed\"\n      });\n\n    case \"GET_DATA_TARGET\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dataTarget: action.payload,\n        message: action.message\n      });\n\n    case \"GET_DATA_TARGET\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        message: action.message\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default transferReducer;","map":{"version":3,"sources":["D:/Tutorial Web/Week 10/Zwallet-Frontend/configs/redux/reducer/transfer.js"],"names":["initialState","transfer","dataTarget","loading","message","status","transferReducer","state","action","type","user","payload"],"mappings":";;;;;;AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,UAAU,EAAE,EAFO;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,OAAO,EAAE,EAJU;AAKnBC,EAAAA,MAAM,EAAE;AALW,CAArB;;AAQA,MAAMC,eAAe,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,sBAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,IAAI,EAAEF,MAAM,CAACG;AAFf;;AAIF,SAAK,kBAAL;AACE,6CACKJ,KADL;AAEEJ,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAK,kBAAL;AACE,6CACKI,KADL;AAEEJ,QAAAA,OAAO,EAAE,KAFX;AAGEE,QAAAA,MAAM,EAAE;AAHV;;AAKF,SAAK,kBAAL;AACE,6CACKE,KADL;AAEEJ,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,OAAO,EAAEI,MAAM,CAACG,OAHlB;AAIEN,QAAAA,MAAM,EAAE;AAJV;;AAMF,SAAK,iBAAL;AACE,6CACKE,KADL;AAEEL,QAAAA,UAAU,EAAEM,MAAM,CAACG,OAFrB;AAGEP,QAAAA,OAAO,EAAEI,MAAM,CAACJ;AAHlB;;AAKF,SAAK,iBAAL;AACE,6CACKG,KADL;AAEEH,QAAAA,OAAO,EAAEI,MAAM,CAACJ;AAFlB;;AAIF;AACE,aAAOG,KAAP;AApCJ;AAsCD,CAvCD;;AAyCA,eAAeD,eAAf","sourcesContent":["const initialState = {\r\n  transfer: {},\r\n  dataTarget: {},\r\n  loading: false,\r\n  message: \"\",\r\n  status: \"success\",\r\n};\r\n\r\nconst transferReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"INSERT_DATA_TRANSFER\":\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      };\r\n    case \"TRANSFER_REQUEST\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case \"TRANSFER_SUCCESS\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        status: \"success\",\r\n      };\r\n    case \"TRANSFER_FAILURE\":\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        message: action.payload,\r\n        status: \"failed\",\r\n      };\r\n    case \"GET_DATA_TARGET\":\r\n      return {\r\n        ...state,\r\n        dataTarget: action.payload,\r\n        message: action.message,\r\n      };\r\n    case \"GET_DATA_TARGET\":\r\n      return {\r\n        ...state,\r\n        message: action.message,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default transferReducer;\r\n"]},"metadata":{},"sourceType":"module"}