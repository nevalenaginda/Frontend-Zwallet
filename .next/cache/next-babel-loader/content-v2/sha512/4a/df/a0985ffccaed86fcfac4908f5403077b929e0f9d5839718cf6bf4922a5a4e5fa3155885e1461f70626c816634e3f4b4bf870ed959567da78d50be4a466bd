{"ast":null,"code":"import axios from \"axios\";\nlet idUser;\n\nif (false) {\n  idUser = localStorage.getItem(\"id\");\n}\n\nexport const getAllHistory = (id, limit = 3, sort = \"desc\") => dispatch => {\n  return new Promise((resolve, reject) => {\n    const URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\n    dispatch({\n      type: \"REQUEST_ALL_HISTORY\"\n    });\n    axios.get(`${URLAPI}history/${id}?limit=${limit}&sort=${sort}`, {\n      withCredentials: true\n    }).then(res => {\n      dispatch({\n        type: \"REQUEST_ALL_HISTORY_SUCCESS\",\n        payload: res.data,\n        message: res.data.message\n      });\n      resolve(res);\n    }).catch(err => {\n      dispatch({\n        type: \"REQUEST_ALL_HISTORY_FAILURE\",\n        message: err.response.data.message\n      });\n      reject(err);\n    });\n  });\n};\nexport const getAllNotifications = idUser => dispatch => {\n  return new Promise((resolve, reject) => {\n    const URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\n    dispatch({\n      type: \"REQUEST_ALL_NOTIFICATIONS\"\n    });\n    axios.get(`${URLAPI}notifications/${idUser}`, {\n      withCredentials: true\n    }).then(res => {\n      if (res.data.code !== 404) {\n        dispatch({\n          type: \"REQUEST_ALL_NOTIFICATIONS_SUCCESS\",\n          payload: res.data.pagination.totalData,\n          message: res.data.message\n        });\n      } else {\n        dispatch({\n          type: \"REQUEST_ALL_NOTIFICATIONS_FAILURE\",\n          message: err.response.data.message,\n          payload: 0\n        });\n      }\n\n      resolve(res);\n    }).catch(err => {\n      dispatch({\n        type: \"REQUEST_ALL_NOTIFICATIONS_FAILURE\",\n        message: err.response.data.message,\n        payload: 0\n      });\n      reject(err);\n    });\n  });\n};\nexport const getDetailHistory = id => dispatch => {\n  return new Promise((resolve, reject) => {\n    const URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\n    axios.get(`${URLAPI}detailHistory/${id}`, {\n      withCredentials: true\n    }).then(res => {\n      dispatch(getAllNotifications(idUser));\n      resolve(res);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};","map":{"version":3,"sources":["D:/Tutorial Web/Week 10/Zwallet-Frontend/configs/redux/actions/history.js"],"names":["axios","idUser","localStorage","getItem","getAllHistory","id","limit","sort","dispatch","Promise","resolve","reject","URLAPI","process","env","NEXT_PUBLIC_URL_API_WITH_SLASH","type","get","withCredentials","then","res","payload","data","message","catch","err","response","getAllNotifications","code","pagination","totalData","getDetailHistory"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nlet idUser;\r\nif (process.browser) {\r\n  idUser = localStorage.getItem(\"id\");\r\n}\r\n\r\nexport const getAllHistory = (id, limit = 3, sort = \"desc\") => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    const URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\r\n    dispatch({\r\n      type: \"REQUEST_ALL_HISTORY\",\r\n    });\r\n    axios\r\n      .get(`${URLAPI}history/${id}?limit=${limit}&sort=${sort}`, {\r\n        withCredentials: true,\r\n      })\r\n      .then((res) => {\r\n        dispatch({\r\n          type: \"REQUEST_ALL_HISTORY_SUCCESS\",\r\n          payload: res.data,\r\n          message: res.data.message,\r\n        });\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        dispatch({\r\n          type: \"REQUEST_ALL_HISTORY_FAILURE\",\r\n          message: err.response.data.message,\r\n        });\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const getAllNotifications = (idUser) => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    const URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\r\n    dispatch({\r\n      type: \"REQUEST_ALL_NOTIFICATIONS\",\r\n    });\r\n    axios\r\n      .get(`${URLAPI}notifications/${idUser}`, {\r\n        withCredentials: true,\r\n      })\r\n      .then((res) => {\r\n        if (res.data.code !== 404) {\r\n          dispatch({\r\n            type: \"REQUEST_ALL_NOTIFICATIONS_SUCCESS\",\r\n            payload: res.data.pagination.totalData,\r\n            message: res.data.message,\r\n          });\r\n        } else {\r\n          dispatch({\r\n            type: \"REQUEST_ALL_NOTIFICATIONS_FAILURE\",\r\n            message: err.response.data.message,\r\n            payload: 0,\r\n          });\r\n        }\r\n\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        dispatch({\r\n          type: \"REQUEST_ALL_NOTIFICATIONS_FAILURE\",\r\n          message: err.response.data.message,\r\n          payload: 0,\r\n        });\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const getDetailHistory = (id) => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    const URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\r\n    axios\r\n      .get(`${URLAPI}detailHistory/${id}`, {\r\n        withCredentials: true,\r\n      })\r\n      .then((res) => {\r\n        dispatch(getAllNotifications(idUser));\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}