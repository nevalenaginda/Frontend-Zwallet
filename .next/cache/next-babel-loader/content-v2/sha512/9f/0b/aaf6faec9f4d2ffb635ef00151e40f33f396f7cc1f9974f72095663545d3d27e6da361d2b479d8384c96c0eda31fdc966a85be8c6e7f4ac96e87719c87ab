{"ast":null,"code":"import axios from \"axios\";\nimport { getAllHistory } from \"./history\";\nexport var transferProcess = function transferProcess(data) {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      var URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\n      axios.post(\"\".concat(URLAPI, \"transferProcess/\").concat(data.from_id), data, {\n        withCredentials: true\n      }).then(function (res) {\n        dispatch(getAllHistory(data.from_id));\n        resolve(res);\n      })[\"catch\"](function (err) {\n        reject(err);\n      });\n    });\n  };\n};\nexport var transferSuccess = function transferSuccess(data) {\n  return function (dispatch) {\n    return new Promise(function (resolve, reject) {\n      var URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\n      axios.post(\"\".concat(URLAPI, \"transferSuccess/\").concat(data.id), data, {\n        withCredentials: true\n      }).then(function (res) {\n        resolve(res);\n      })[\"catch\"](function (err) {\n        reject(new Error(err));\n      });\n    });\n  };\n};\nexport var getDataTarget = function getDataTarget(id) {\n  return function (dispatch) {\n    var URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\n    axios.get(\"\".concat(URLAPI, \"user/\").concat(id), {\n      withCredentials: true\n    }).then(function (res) {\n      dispatch({\n        type: \"GET_DATA_TARGET\",\n        payload: res.data.data,\n        message: res.data.message\n      });\n    })[\"catch\"](function (err) {\n      dispatch({\n        type: \"GET_DATA_TARGET\",\n        message: err.res.data.message\n      });\n    });\n  };\n};","map":{"version":3,"sources":["D:/Tutorial Web/Week 10/Zwallet-Frontend/configs/redux/actions/transfer.js"],"names":["axios","getAllHistory","transferProcess","data","dispatch","Promise","resolve","reject","URLAPI","process","env","NEXT_PUBLIC_URL_API_WITH_SLASH","post","from_id","withCredentials","then","res","err","transferSuccess","id","Error","getDataTarget","get","type","payload","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,WAA9B;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD;AAAA,SAAU,UAACC,QAAD,EAAc;AACrD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,8BAA3B;AACAX,MAAAA,KAAK,CACFY,IADH,WACWJ,MADX,6BACoCL,IAAI,CAACU,OADzC,GACoDV,IADpD,EAC0D;AACtDW,QAAAA,eAAe,EAAE;AADqC,OAD1D,EAIGC,IAJH,CAIQ,UAACC,GAAD,EAAS;AACbZ,QAAAA,QAAQ,CAACH,aAAa,CAACE,IAAI,CAACU,OAAN,CAAd,CAAR;AACAP,QAAAA,OAAO,CAACU,GAAD,CAAP;AACD,OAPH,WAQS,UAACC,GAAD,EAAS;AACdV,QAAAA,MAAM,CAACU,GAAD,CAAN;AACD,OAVH;AAWD,KAbM,CAAP;AAcD,GAf8B;AAAA,CAAxB;AAiBP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACf,IAAD;AAAA,SAAU,UAACC,QAAD,EAAc;AACrD,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,8BAA3B;AACAX,MAAAA,KAAK,CACFY,IADH,WACWJ,MADX,6BACoCL,IAAI,CAACgB,EADzC,GAC+ChB,IAD/C,EACqD;AACjDW,QAAAA,eAAe,EAAE;AADgC,OADrD,EAIGC,IAJH,CAIQ,UAACC,GAAD,EAAS;AACbV,QAAAA,OAAO,CAACU,GAAD,CAAP;AACD,OANH,WAOS,UAACC,GAAD,EAAS;AACdV,QAAAA,MAAM,CAAC,IAAIa,KAAJ,CAAUH,GAAV,CAAD,CAAN;AACD,OATH;AAUD,KAZM,CAAP;AAaD,GAd8B;AAAA,CAAxB;AAgBP,OAAO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACF,EAAD;AAAA,SAAQ,UAACf,QAAD,EAAc;AACjD,QAAMI,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,8BAA3B;AACAX,IAAAA,KAAK,CACFsB,GADH,WACUd,MADV,kBACwBW,EADxB,GAC8B;AAC1BL,MAAAA,eAAe,EAAE;AADS,KAD9B,EAIGC,IAJH,CAIQ,UAACC,GAAD,EAAS;AACbZ,MAAAA,QAAQ,CAAC;AACPmB,QAAAA,IAAI,EAAE,iBADC;AAEPC,QAAAA,OAAO,EAAER,GAAG,CAACb,IAAJ,CAASA,IAFX;AAGPsB,QAAAA,OAAO,EAAET,GAAG,CAACb,IAAJ,CAASsB;AAHX,OAAD,CAAR;AAKD,KAVH,WAWS,UAACR,GAAD,EAAS;AACdb,MAAAA,QAAQ,CAAC;AAAEmB,QAAAA,IAAI,EAAE,iBAAR;AAA2BE,QAAAA,OAAO,EAAER,GAAG,CAACD,GAAJ,CAAQb,IAAR,CAAasB;AAAjD,OAAD,CAAR;AACD,KAbH;AAcD,GAhB4B;AAAA,CAAtB","sourcesContent":["import axios from \"axios\";\r\nimport { getAllHistory } from \"./history\";\r\nexport const transferProcess = (data) => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    const URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\r\n    axios\r\n      .post(`${URLAPI}transferProcess/${data.from_id}`, data, {\r\n        withCredentials: true,\r\n      })\r\n      .then((res) => {\r\n        dispatch(getAllHistory(data.from_id));\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(err);\r\n      });\r\n  });\r\n};\r\n\r\nexport const transferSuccess = (data) => (dispatch) => {\r\n  return new Promise((resolve, reject) => {\r\n    const URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\r\n    axios\r\n      .post(`${URLAPI}transferSuccess/${data.id}`, data, {\r\n        withCredentials: true,\r\n      })\r\n      .then((res) => {\r\n        resolve(res);\r\n      })\r\n      .catch((err) => {\r\n        reject(new Error(err));\r\n      });\r\n  });\r\n};\r\n\r\nexport const getDataTarget = (id) => (dispatch) => {\r\n  const URLAPI = process.env.NEXT_PUBLIC_URL_API_WITH_SLASH;\r\n  axios\r\n    .get(`${URLAPI}user/${id}`, {\r\n      withCredentials: true,\r\n    })\r\n    .then((res) => {\r\n      dispatch({\r\n        type: \"GET_DATA_TARGET\",\r\n        payload: res.data.data,\r\n        message: res.data.message,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      dispatch({ type: \"GET_DATA_TARGET\", message: err.res.data.message });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}